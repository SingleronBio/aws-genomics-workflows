---
AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  (WWPS-GLS-WF-GWFCORE-LT) Creates an EC2 Launch Template for AWS Batch based
  genomics workflows

Mappings:
  TagMap:
    default:
      architecture: "genomics-workflows"
      solution: "default"
      tags:
        - Key: "architecture"
          Value: "genomics-workflows"
        - Key: "solution"
          Value: "default"

Parameters:
  LaunchTemplateNamePrefix:
    Type: String
    Default: AWSGlobal
    Description: Name of the launch template. This will be made unique using the Stack ID.
  DockerStorageVolumeSize:
    Type: Number
    Default: 50
    Description: The initial size of the volume Docker will use for image and metadata storage (GB)
  ArtifactRootUrl:
    Type: String
    Default: s3://singleron-ami/AWSGlobal
    Description: >-
      Root URL for where artifacts / additions scripts are stored
  FsxMountPoint:
    Type: String
    Description: Fsx mount command

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Required"
        Parameters:
          - ArtifactRootUrl
          - FsxMountPoint
      - Label:
          default: "Optional"
        Parameters:
          - LaunchTemplateNamePrefix
          - DockerStorageVolumeSize

Resources:
  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: 
        Fn::Join:
          - "-"
          - - !Ref LaunchTemplateNamePrefix
            - !Select [2, !Split ["/", !Ref "AWS::StackId" ]]
      LaunchTemplateData:
        # Used in tandem with UserData to check if the instance is provisioned
        # correctly. It is important to terminate mis-provisioned instances before
        # jobs are placed on them
        InstanceInitiatedShutdownBehavior: terminate
        TagSpecifications:
          - ResourceType: instance
            Tags:
            - Key: architecture
              Value: !FindInMap ["TagMap", "default", "architecture"]
        BlockDeviceMappings:
          - Ebs:
              DeleteOnTermination: True
              VolumeSize: 50
              VolumeType: gp3
            DeviceName: /dev/xvda
          - Ebs:
              DeleteOnTermination: True
              VolumeSize: !Ref DockerStorageVolumeSize
              VolumeType: gp3
            DeviceName: /dev/xvdba
        UserData:
          Fn::Base64:
            Fn::Sub: |
                MIME-Version: 1.0
                Content-Type: multipart/mixed; boundary="==BOUNDARY=="

                --==BOUNDARY==
                Content-Type: text/cloud-config; charset="us-ascii"

                packages:
                - jq
                - btrfs-progs
                - sed
                - git
                - unzip

                runcmd:
                # install aws-cli v2 and copy the static binary in an easy to find location for bind-mounts into containers
                - curl -s "https://singleron-ami.s3.cn-northwest-1.amazonaws.com.cn/AWSGlobal/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
                - unzip -q /tmp/awscliv2.zip -d /tmp
                - /tmp/aws/install -b /usr/bin

                # check that the aws-cli was actually installed. if not shutdown (terminate) the instance
                - command -v aws || shutdown -P now
                - amazon-linux-extras install -y lustre2.10
                - mkdir -p /opt/aws-cli/bin
                - cp -a $(dirname $(find /usr/local/aws-cli -name 'aws' -type f))/. /opt/aws-cli/bin/

                - mkdir - p /usr/local/aws-cli/fsx
                - mount -t lustre -o ro,noatime,flock ${FsxMountPoint} /usr/local/aws-cli/fsx

                # set environment variables for provisioning
                - export ARTIFACT_S3_ROOT_URL=${ArtifactRootUrl}
                - export AWS_DEFAULT_REGION=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)
                - aws configure set default.region $AWS_DEFAULT_REGION

                # enable ecs spot instance draining
                - echo ECS_ENABLE_SPOT_INSTANCE_DRAINING=true >> /etc/ecs/ecs.config

                # pull docker images only if missing
                - echo ECS_IMAGE_PULL_BEHAVIOR=prefer-cached >> /etc/ecs/ecs.config

                - cd /opt
                - aws s3 sync --no-progress $ARTIFACT_S3_ROOT_URL ./
                - chmod a+x /opt/ecs-additions/provision.sh
                - /opt/ecs-additions/provision.sh

                --==BOUNDARY==--

Outputs:
  LaunchTemplateId:
    Description: >-
      EC2 Launch Template ID to use when creating AWS Batch compute environments
      for genomics workflows
    Value: !Ref EC2LaunchTemplate
...
